package designpattern.creational.singleton;

public class Singleton {

    // The code generated by the compiler is allowed to update the
    // shared variable stored in the memory to reference
    // a partially constructed object.
    // i.e. instance may not be null but the initialization has not yet completed.
    // volatile keyword makes sure that multiple threads will be
    // able to handle the singleton instance correctly.
    private static volatile Singleton instance;

    private String data;
    // other attributes...

    private Singleton(String data) {
        this.data = data;
    }

    public static Singleton getInstance(String data) {

        // Improving our code by limiting synchronization to the rare case
        // of computing the field's value i.e. we are
        // skipping synchronization when retrieving an already created instance.
        if(instance == null) {
            // We also need to push our if statement inside a synchronized block
            synchronized (Singleton.class) {
                // The created instance is wrapped inside the if statement
                // that checks if the static instance of our singleton is null or not
                if (instance == null) {
                    instance = new Singleton(data);
                }
            }
        }

        return instance;
    }

    public static Singleton getInstanceImproved(String data) {

        // volatile keyword makes the instance non-cacheable
        // hence we will have to access it from the main memory always.
        // So even if the variable was already initialized,
        // we will have to fetch it twice:
        // 1. At line 25: if(instance == null) {
        // 2. At line 36: return instance;
        // To avoid doing this and accessing the memory only once, do:

        Singleton result = instance;

        if(result == null) {
            synchronized (Singleton.class) {
                result = instance;
                if(result == null) {
                    instance = result = new Singleton(data);
                }
            }
        }

        return result;
    }
}
